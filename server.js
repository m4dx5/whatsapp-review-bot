require('dotenv').config(); // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
app.use(bodyParser.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GREEN_API_URL = 'https://api.green-api.com';
const ID_INSTANCE = process.env.ID_INSTANCE; // –¢–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_TOKEN = process.env.API_TOKEN_IN;   // –¢–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!ID_INSTANCE || !API_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.error('–î–ª—è Render –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.error('1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> Environment');
  console.error('2. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
  console.error('   - ID_INSTANCE');
  console.error('   - API_TOKEN_IN');
  process.exit(1);
}

console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:');
console.log('ID_INSTANCE:', ID_INSTANCE);
console.log('API_TOKEN:', '***' + API_TOKEN.slice(-4));
console.log('PORT:', PORT);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
app.post('/webhook', async (req, res) => {
  try {
    console.log('\nüì© –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', JSON.stringify(req.body, null, 2));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≤–µ–±—Ö—É–∫–∞
    if (req.body.typeWebhook !== 'incomingMessageReceived') {
      console.log('‚ö° –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ —Ç–∏–ø–∞:', req.body.typeWebhook);
      return res.status(200).json({ status: 'ignored' });
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    const chatId = req.body.senderData?.chatId;
    const messageType = req.body.messageData?.typeMessage;
    let text = '';

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    switch (messageType) {
      case 'textMessage':
        text = req.body.messageData.textMessageData?.textMessage || '';
        break;
      case 'extendedTextMessage':
        text = req.body.messageData.extendedTextMessageData?.text || '';
        break;
      default:
        console.log('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', messageType);
        return res.status(200).json({ status: 'unsupported_type' });
    }

    console.log(`‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: "${text}"`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ (1-5)
    const rating = parseInt(text.trim());
    if (!isNaN(rating) && rating >= 1 && rating <= 5) {
      let responseMessage;
      
      // –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–æ–∫ 1-3
      if (rating <= 3) {
        responseMessage = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –ú—ã —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.';
      } 
      // –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–æ–∫ 4-5
      else {
        responseMessage = `üîß –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –≤–∏–∑–∏—Ç –≤ –Ω–∞—à —à–∏–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:\nüëâ –Ø–Ω–¥–µ–∫—Å: https://example.com/yandex\nüëâ 2–ì–ò–°: https://example.com/2gis\n\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: +7(XXX)XXX-XX-XX`;
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
      await sendWhatsAppMessage(chatId, responseMessage);
    }

    res.status(200).json({ status: 'processed' });
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok',
    service: 'WhatsApp Review Bot',
    version: '1.0.2',
    time: new Date().toISOString()
  });
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendWhatsAppMessage(chatId, message) {
  try {
    const response = await axios.post(
      `${GREEN_API_URL}/waInstance${ID_INSTANCE}/SendMessage/${API_TOKEN}`,
      {
        chatId: chatId,
        message: message
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      }
    );
    
    console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      to: chatId,
      id: response.data.idMessage,
      time: new Date().toISOString()
    });
    
    return response.data;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
      error: error.response?.data || error.message,
      stack: error.stack
    });
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîÑ –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
});
